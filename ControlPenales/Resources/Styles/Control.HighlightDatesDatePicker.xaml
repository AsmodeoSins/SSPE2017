<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
                    xmlns:HLDatePicker="clr-namespace:ControlPenales.Controls">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <Converters:ThicknessToDoubleConverter x:Key="ThicknessToDoubleConverter" />

    <!--Estilo para calendario Highlight-->
    <Style x:Key="MetroCalendarCustom"
           TargetType="{x:Type Calendar}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="Foreground"
                Value="white" />
        <Setter Property="CalendarDayButtonStyle"
                Value="{DynamicResource MetroCalendarDayButtonStyleCustom}" />
        <Setter Property="CalendarItemStyle"
                Value="{DynamicResource MetroCalendarItemStyle}" />
        <Setter Property="CalendarButtonStyle"
                Value="{DynamicResource MetroCalendarButtonStyle}" />
        <Setter Property="Background"
                Value="{DynamicResource WhiteBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource BlackBrush}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root"
                                HorizontalAlignment="Center"
                                Background="{DynamicResource WhiteBrush}">
                        <CalendarItem x:Name="PART_CalendarItem"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      Background="{TemplateBinding Background}"
                                      Style="{TemplateBinding CalendarItemStyle}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroCalendarDayButtonStyleCustom"
           TargetType="{x:Type CalendarDayButton}">
        <Setter Property="MinWidth"
                Value="5" />
        <Setter Property="MinHeight"
                Value="5" />
        <Setter Property="FontSize"
                Value="{DynamicResource ContentFontSize}" />
        <Setter Property="FontFamily"
                Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <!-- Agregado para highlightdatepicker -->
                    <ControlTemplate.Resources>
                        <HLDatePicker:HighlightDateConverter x:Key="HighlightDate" />
                    </ControlTemplate.Resources>
                    <!-- Fin Agregado -->

                    <Grid x:Name="CalendarDayButtonGrid">
                        <!--Se agrega un id para poder hacer referencia al grid despues-->
                        <!-- Agregado para highlightdatepicker -->
                        <Grid.ToolTip>
                            <MultiBinding Converter="{StaticResource HighlightDate}">
                                <MultiBinding.Bindings>
                                    <Binding />
                                    <!--Espacio para que el calendario envie la fecha-->
                                    <!--First, let’s deal with the easy part: Why doesn’t the first binding declare a Path?
                                            Remember that the WPF calendar control gives each date a DataContext in the form of a DateTime object.
                                            Since the DataContext is a simple object (a DateTime), there is only one path possible. So, instead of something like this:
                                            <Binding Path=MyProperty />
                                            we get the declaration shown above, with no Path property.-->
                                    <Binding RelativeSource="{RelativeSource FindAncestor,AncestorType={x:Type HLDatePicker:HighlightDatesDatePicker}}"></Binding>
                                    <!--Envia la referencia a la instancia padre del control-->
                                    <Binding RelativeSource="{RelativeSource FindAncestor, 
                     AncestorType={x:Type HLDatePicker:HighlightDatesDatePicker}}" 
                     Path="HighlightedDateList" />
                                    <Binding RelativeSource="{RelativeSource FindAncestor, 
                     AncestorType={x:Type HLDatePicker:HighlightDatesDatePicker}}" 
                     Path="DisplayDate" />
                                </MultiBinding.Bindings>
                            </MultiBinding>
                        </Grid.ToolTip>
                        <!-- Fin Agregado -->


                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="0.5"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="HighlightBackground" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="0.5"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="HighlightBackground" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="0"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="HighlightBackground" />
                                        <DoubleAnimation Duration="0"
                                                         To=".35"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0"
                                                                       Storyboard.TargetName="NormalText"
                                                                       Storyboard.TargetProperty="(TextElement.Foreground)">
                                            <DiscreteObjectKeyFrame Value="{DynamicResource GrayBrush2}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NormalDay" />
                                <VisualState x:Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="Blackout" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="TodayBackground"
                                   Fill="{DynamicResource AccentColorBrush}"
                                   Opacity="0" />

                        <!-- Agregado para highlightdatepicker -->
                        <!--Pinta el cuadro del color seleccionado en la propiedad DateHighlightBrush-->
                        <Rectangle x:Name="AccentBackground"
                                RadiusX="1" RadiusY="1"
                                IsHitTestVisible="False"
                                Fill="{Binding RelativeSource={RelativeSource AncestorType=HLDatePicker:HighlightDatesDatePicker}, 
                                Path=DateHighlightBrush}" />
                        <!-- fin agregado -->

                        <Rectangle x:Name="SelectedBackground"
                                   Fill="{DynamicResource AccentColorBrush4}"
                                   Opacity="0" />
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="HighlightBackground"
                                   Opacity="0"
                                   Fill="{DynamicResource AccentColorBrush4}" />
                        <Path x:Name="Blackout"
                              Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z"
                              HorizontalAlignment="Stretch"
                              Margin="3"
                              Opacity="0"
                              RenderTransformOrigin="0.5,0.5"
                              Stretch="Fill"
                              VerticalAlignment="Stretch"
                              Fill="{DynamicResource AccentColorBrush3}" />
                        <ContentPresenter x:Name="NormalText"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="5,1,5,1"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          TextElement.Foreground="{DynamicResource GrayBrush1}" />
                        <Rectangle x:Name="DayButtonFocusVisual"
                                   IsHitTestVisible="false"
                                   Visibility="Collapsed"
                                   Stroke="{DynamicResource AccentColorBrush3}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsToday"
                                           Value="False" />
                                <Condition Property="IsSelected"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="NormalText"
                                    Property="TextElement.Foreground"
                                    Value="{DynamicResource AccentColorBrush}" />
                            <Setter TargetName="DayButtonFocusVisual"
                                    Property="Visibility"
                                    Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsToday"
                                 Value="True">
                            <Setter TargetName="TodayBackground"
                                    Property="Opacity"
                                    Value="1" />
                            <Setter TargetName="NormalText"
                                    Property="TextElement.Foreground"
                                    Value="{DynamicResource AccentSelectedColorBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsToday"
                                           Value="True" />
                                <Condition Property="IsBlackedOut"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TodayBackground"
                                    Property="Opacity"
                                    Value="0.5" />
                            <Setter TargetName="Blackout"
                                    Property="Fill"
                                    Value="{DynamicResource AccentColorBrush}" />
                        </MultiTrigger>

                        <!-- Agregado para highlightdatepicker -->
                        <!-- No tooltips if tooltips turned off -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=HLDatePicker:HighlightDatesDatePicker}, Path=ShowHighlightedDateText}" Value="False">
                            <Setter TargetName="CalendarDayButtonGrid" Property="ToolTipService.IsEnabled" Value="False" />
                        </DataTrigger>

                        <!-- No highlighting if IValueConverter returned null -->
                        <DataTrigger Value="{x:Null}">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource HighlightDate}">
                                    <MultiBinding.Bindings>
                                        <Binding />
                                        <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type HLDatePicker:HighlightDatesDatePicker}}" />
                                        <Binding RelativeSource="{RelativeSource FindAncestor, 
                     AncestorType={x:Type HLDatePicker:HighlightDatesDatePicker}}" 
                     Path="HighlightedDateList" />
                                        <Binding RelativeSource="{RelativeSource FindAncestor, 
                     AncestorType={x:Type HLDatePicker:HighlightDatesDatePicker}}" 
                     Path="DisplayDate" />
                                    </MultiBinding.Bindings>
                                </MultiBinding>

                            </DataTrigger.Binding>
                            <Setter TargetName="AccentBackground" Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                        <!--fin agregado-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroDatePickerHighlightDatePicker" TargetType="{x:Type HLDatePicker:HighlightDatesDatePicker}">
        <Setter Property="Background"
                Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource TextBoxBorderBrush}" />
        <!--<Setter Property="Controls:ControlsHelper.FocusBorderBrush"
                Value="{DynamicResource TextBoxFocusBorderBrush}" />
        <Setter Property="Controls:ControlsHelper.MouseOverBorderBrush"
                Value="{DynamicResource TextBoxMouseOverBorderBrush}" />-->
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Controls:TextBoxHelper.IsMonitoring"
                Value="True" />
        <Setter Property="FontFamily"
                Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="FontSize"
                Value="{DynamicResource ContentFontSize}" />
        <Setter Property="Foreground"
                Value="{DynamicResource TextBrush}" />
        <Setter Property="MinHeight"
                Value="26" />
        <Setter Property="IsTodayHighlighted"
                Value="True" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="SelectedDateFormat"
                Value="Short" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="CalendarStyle"
                Value="{DynamicResource MetroCalendar}" />
        <Setter Property="Validation.ErrorTemplate"
                Value="{DynamicResource ValidationErrorTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Base"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Grid x:Name="PART_InnerGrid"
                              Margin="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualHeight, Mode=OneWay}" />
                            </Grid.ColumnDefinitions>

                            <Button x:Name="PART_Button"
                                    Grid.Column="1"
                                    Style="{DynamicResource ChromelessButtonStyle}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsTabStop="False">
                                <Path Stretch="Uniform"
                                      Fill="{Binding ElementName=PART_Button, Path=Foreground, Mode=OneWay}"
                                      Data="F1 M 11.0017,36.005L 11.0017,14.002L 14.0021,14.002L 14.0021,11.0015L 19.0028,11.0015L 19.0028,14.002L 28.0039,14.002L 28.0039,11.0015L 33.0046,11.0015L 33.0046,14.002L 36.005,14.002L 36.005,36.005L 11.0017,36.005 Z M 13.0019,34.0048L 34.0047,34.0048L 34.0047,19.0027L 13.0019,19.0027L 13.0019,34.0048 Z M 16.5024,12.5017C 15.95,12.5017 15.5022,13.1734 15.5022,14.0019C 15.5022,14.8304 15.95,15.5021 16.5024,15.5021C 17.0547,15.5021 17.5025,14.8304 17.5025,14.0019C 17.5025,13.1734 17.0547,12.5017 16.5024,12.5017 Z M 30.5,12.4998C 29.9476,12.4998 29.4999,13.1715 29.4999,14C 29.4999,14.8286 29.9476,15.5002 30.5,15.5002C 31.0524,15.5002 31.5001,14.8286 31.5001,14C 31.5001,13.1715 31.0524,12.4998 30.5,12.4998 Z M 20.5994,33.0046L 18.1154,33.0046L 18.1154,23.7987C 17.2116,24.7375 16.1471,25.4314 14.9217,25.8803L 14.9217,23.3868C 15.5686,23.179 16.2709,22.7857 17.0287,22.2069C 17.7864,21.628 18.3067,20.9527 18.5895,20.1809L 20.5994,20.1809L 20.5994,33.0046 Z M 27.874,33.0046L 27.874,30.5111L 22.7286,30.5111L 22.7286,28.3822L 28.2039,20.359L 30.358,20.359L 30.358,28.3738L 31.9548,28.3738L 31.9548,30.5111L 30.358,30.5111L 30.358,33.0046L 27.874,33.0046 Z M 27.874,28.3738L 27.874,24.2551L 25.0601,28.3738L 27.874,28.3738 Z ">
                                    <Path.Width>
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="FontSize"
                                                 Converter="{x:Static Converters:FontSizeOffsetConverter.Instance}">
                                            <Binding.ConverterParameter>
                                                <System:Double>4</System:Double>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </Path.Width>
                                    <Path.Height>
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="FontSize"
                                                 Converter="{x:Static Converters:FontSizeOffsetConverter.Instance}">
                                            <Binding.ConverterParameter>
                                                <System:Double>4</System:Double>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </Path.Height>
                                </Path>
                            </Button>

                            <DatePickerTextBox x:Name="PART_TextBox"
                                               Grid.Column="0"
                                               CaretBrush="{DynamicResource BlackBrush}"
                                               ContextMenu="{DynamicResource TextBoxMetroContextMenu}"
                                               Foreground="{TemplateBinding Foreground}"
                                               Focusable="{TemplateBinding Focusable}"
                                               FontSize="{TemplateBinding FontSize}"
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=PART_Root}"
                                   StaysOpen="False" />
                        </Grid>
                        <Border x:Name="DisabledVisualElement"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{DynamicResource ControlsDisabledBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{DynamicResource ControlsDisabledBrush}"
                                IsHitTestVisible="False"
                                Opacity="0" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Base"
                                    Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.MouseOverBorderBrush)}" />
                        </Trigger>-->
                        <!--<Trigger Property="IsFocused"
                                 Value="True">
                            <Setter TargetName="Base"
                                    Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}" />
                        </Trigger>-->
                        <!--<Trigger Property="IsKeyboardFocusWithin"
                                 Value="True">
                            <Setter TargetName="Base"
                                    Property="BorderBrush"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}" />
                        </Trigger>-->
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                    Property="Opacity"
                                    Value="0.6" />
                        </Trigger>
                        <Trigger SourceName="PART_Button"
                                 Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="PART_Button"
                                    Property="Background"
                                    Value="{DynamicResource GrayBrush8}" />
                            <Setter TargetName="PART_Button"
                                    Property="Foreground"
                                    Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                        <Trigger SourceName="PART_Button"
                                 Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="PART_Button"
                                    Property="Background"
                                    Value="{DynamicResource BlackBrush}" />
                            <Setter TargetName="PART_Button"
                                    Property="Foreground"
                                    Value="{DynamicResource WhiteBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>