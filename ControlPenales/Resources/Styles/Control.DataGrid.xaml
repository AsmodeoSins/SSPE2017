<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
                    xmlns:Convertidores="clr-namespace:ControlPenales">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.CheckBox.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <Converters:ToUpperConverter x:Key="ToUpperConverter"/>
    <Convertidores:TituloConverter x:Key="ToTituloConverter"/>

    <Style x:Key="MetroDataGridCheckBox" TargetType="{x:Type CheckBox}"
         BasedOn="{StaticResource MetroCheckBox}">
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsReadOnly, RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                   Value="True">
                <Setter Property="UIElement.IsHitTestVisible" Value="false"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=MetroDataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}"
         TargetType="{x:Type Button}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border" SnapsToDevicePixels="true">
                            <FrameworkElement.Resources>
                                <Style TargetType="{x:Type Rectangle}">
                                    <Setter Property="Shape.Fill" Value="{DynamicResource GrayBrush7}"/>
                                </Style>
                            </FrameworkElement.Resources>
                        </Rectangle>
                        <Polygon x:Name="Arrow" Fill="{DynamicResource GrayBrush1}" HorizontalAlignment="Right" Margin="8,8,3,3"
                     Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush2}" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Width" Value="8"/>
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush5}"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="Transparent">
                        <Rectangle HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Width="1"
                       Fill="{TemplateBinding Control.Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroRowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Width" Value="8"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="25"/>
        <!-- COLOR DE LA LETRA EN EL GRID-->
        <Setter Property="Control.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="10,4,4,7"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush5}"/>
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush8}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="BackgroundBorder" BorderThickness="0,0,0,3" Grid.ColumnSpan="2"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"/>
                        <ContentPresenter x:Name="HeaderContent" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        <Path x:Name="SortArrow" Visibility="Collapsed" Stretch="Fill" Grid.Column="1" Width="8" Height="10"
                  Margin="0,0,8,2" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                  Fill="{DynamicResource GrayBrush2}"/>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" HorizontalContentAlignment="Left"
                   Background="Transparent" Style="{StaticResource MetroColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" HorizontalContentAlignment="Right"
                   Style="{StaticResource MetroColumnHeaderGripperStyle}" Grid.Column="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="DataGridColumnHeader.SortDirection">
                            <!-- CAMBIO DE FONDO EN EL BACKGROUND DEL HEADER-->
                            <Setter TargetName="BackgroundBorder" Value="{StaticResource ColorHeader}" Property="Border.Background"/>
                            <Setter Property="Control.Foreground" Value="White"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Value="{x:Null}" Property="DataGridColumnHeader.SortDirection"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BackgroundBorder" Value="{DynamicResource GrayBrush8}" Property="Border.Background"/>
                            <Setter Property="Control.Foreground" Value="Black"/>
                        </MultiTrigger>
                        <Trigger Property="DataGridColumnHeader.SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="SortArrow" Property="Path.Data"
                      Value="F1 M 34,57 L 42,57 42,32.25 52,42.25 52,31.75 38,17.75 24,31.75 24,42.25 34,32.25 34,57 Z"/>
                        </Trigger>
                        <Trigger Property="DataGridColumnHeader.SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="SortArrow" Property="Path.Data"
                      Value="F1 M 42,19.0002 L 34,19.0002 34,43.7502 24,33.7502 24,44.2502 38,58.2502 52,44.2502 52,33.7502 42,43.7502 42,19.0002 Z"/>
                            <Setter TargetName="SortArrow" Property="FrameworkElement.Margin" Value="0,0,8,0"/>
                        </Trigger>
                        <Trigger Property="DataGridColumnHeader.DisplayIndex" Value="0">
                            <Setter TargetName="PART_LeftHeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentControl.ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontWeight="SemiBold" FontSize="13px" Text="{Binding Converter={StaticResource ToTituloConverter}}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                            </Style>
                        </TextBlock.Style>
                        <!--<TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="CharacterCasing" Value="Lower"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Text.Length, RelativeSource={RelativeSource Self=}}">
                                        <Setter Property="CharacterCasing" Value="Upper"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>-->
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroDataGridColumnHeaderDisable" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true" />
        <Setter Property="FrameworkElement.MinWidth" Value="0" />
        <Setter Property="FrameworkElement.MinHeight" Value="25" />
        <!-- COLOR DE LA LETRA EN EL GRID-->
        <Setter Property="Control.Foreground" Value="Black" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Padding" Value="10,4,4,7" />
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,0" />
        <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush5}" />
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush8}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="BackgroundBorder" BorderThickness="0,0,0,3" Grid.ColumnSpan="2" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}" />
                        <ContentPresenter x:Name="HeaderContent" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        <Path x:Name="SortArrow" Visibility="Collapsed" Stretch="Fill" Grid.Column="1" Width="8" Height="10" Margin="0,0,8,2" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                                Fill="{DynamicResource GrayBrush2}" />
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" HorizontalContentAlignment="Left" Background="Transparent"
                                Style="{StaticResource MetroColumnHeaderGripperStyle}" />
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" HorizontalContentAlignment="Right" Style="{StaticResource MetroColumnHeaderGripperStyle}" Grid.Column="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="DataGridColumnHeader.SortDirection">
                            <!-- CAMBIO DE FONDO EN EL BACKGROUND DEL HEADER-->
                            <Setter TargetName="BackgroundBorder" Value="{StaticResource ColorHeader}" Property="Border.Background" />
                            <Setter Property="Control.Foreground" Value="White" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition Value="{x:Null}" Property="DataGridColumnHeader.SortDirection" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BackgroundBorder" Value="{DynamicResource GrayBrush8}" Property="Border.Background" />
                            <Setter Property="Control.Foreground" Value="Black" />
                        </MultiTrigger>
                        <Trigger Property="DataGridColumnHeader.SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="UIElement.Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="Path.Data" Value="F1 M 34,57 L 42,57 42,32.25 52,42.25 52,31.75 38,17.75 24,31.75 24,42.25 34,32.25 34,57 Z" />
                        </Trigger>
                        <Trigger Property="DataGridColumnHeader.SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="UIElement.Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="Path.Data"
                                    Value="F1 M 42,19.0002 L 34,19.0002 34,43.7502 24,33.7502 24,44.2502 38,58.2502 52,44.2502 52,33.7502 42,43.7502 42,19.0002 Z" />
                            <Setter TargetName="SortArrow" Property="FrameworkElement.Margin" Value="0,0,8,0" />
                        </Trigger>
                        <Trigger Property="DataGridColumnHeader.DisplayIndex" Value="0">
                            <Setter TargetName="PART_LeftHeaderGripper" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="White" Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentControl.ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontWeight="SemiBold" FontSize="13px" Text="{Binding Converter={StaticResource ToTituloConverter}}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock"></Style>
                        </TextBlock.Style>
                        <!--<TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="CharacterCasing" Value="Lower"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Text.Length, RelativeSource={RelativeSource Self=}}">
                                        <Setter Property="CharacterCasing" Value="Upper"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>--></TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush5}"/>
        <Setter Property="Control.BorderThickness" Value="0,0,1,0"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" Margin="{TemplateBinding FrameworkElement.Margin}"
                    SnapsToDevicePixels="true">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                        <Thumb x:Name="PART_TopHeaderGripper" VerticalAlignment="Top" Height="3"
                   Style="{StaticResource MetroRowHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom" Height="3"
                   Style="{StaticResource MetroRowHeaderGripperStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource AccentColorBrush3}" Property="Control.Background"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--COMENTARIO SEPARADOR-->

    <Style x:Key="MetroDataGridCell" TargetType="{x:Type DataGridCell}">
        <!--<Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>-->
        <Setter Property="Control.Foreground" Value="Black"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Padding" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                              Margin="{TemplateBinding Control.Padding}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="true">
                <!--<Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>-->
                <Setter Property="Control.Foreground" Value="Black"/>
                <Setter Property="Control.Background" Value="{StaticResource ColorSeleccion}"/>
                <Setter Property="Control.FontWeight" Value="Bold"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="Cell"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                     Value="False"/>
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="CellOrRowHeader"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="Cell"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                     Value="False"/>
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="CellOrRowHeader"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}"/>
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush7}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsEnabled" Value="false"/>
                    <Condition Property="DataGridCell.IsSelected" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Value="False">
                <Setter Property="Control.Foreground" Value="Black"/>
            </DataTrigger>

        </Style.Triggers>
    </Style>




    <!--COMENTARIO SEPARADOR-->



    <Style x:Key="MetroDataGridCellDisable" TargetType="{x:Type DataGridCell}">
        <!--<Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>-->
        <Setter Property="Control.Foreground" Value="Black" />
        <Setter Property="Control.Background" Value="Transparent" />
        <Setter Property="Control.BorderBrush" Value="Transparent" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true" />
        <Setter Property="Control.Padding" Value="0" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Content="{TemplateBinding ContentControl.Content}"
                                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" Margin="{TemplateBinding Control.Padding}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="true">
                <!--<Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>-->
                <Setter Property="Control.Foreground" Value="Black" />
                <Setter Property="Control.Background" Value="{StaticResource ColorSeleccion}" />
                <Setter Property="Control.FontWeight" Value="Bold" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Value="Cell" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="False" />
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Value="CellOrRowHeader" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Value="Cell" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="False" />
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Value="CellOrRowHeader" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}" />
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="#3F3F3F" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsEnabled" Value="false" />
                    <Condition Property="DataGridCell.IsSelected" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.Foreground" Value="#3F3F3F" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MetroDataGridRow" TargetType="{x:Type DataGridRow}">
        <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
        <Style.Triggers>
            <!--<Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="White"/>
            </Trigger>

            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="Brown"/>
            </Trigger>-->

            <!-- CUANDO SE DEJA SELECCIONADO EL ROW-->
            <Trigger Property="DataGridRow.IsSelected" Value="true">
                <Setter Property="Control.Background" Value="{StaticResource ColorSeleccion}"/>
                <Setter Property="Control.Foreground" Value="Black"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="DataGridRow.IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="true"/>
                </MultiTrigger.Conditions>
                <!--<Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush2}"/>-->
                <!--<Setter Property="Control.Foreground" Value="Black"/>-->
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="FullRow"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="CellOrRowHeader"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}"/>
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush7}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsEnabled" Value="false"/>
                    <Condition Property="DataGridRow.IsSelected" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource GrayBrush7}"/>
                <Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MetroDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="DataGrid.AlternatingRowBackground" Value="#E4DDD7"/>
        <Setter Property="DataGrid.MinRowHeight" Value="25"/>
        <Setter Property="DataGrid.GridLinesVisibility" Value="None"/>
        <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
        <Setter Property="Control.BorderThickness" Value="0,0,0,0"/>
        <Setter Property="DataGrid.HorizontalGridLinesBrush" Value="{DynamicResource GrayBrush7}"/>
        <Setter Property="DataGrid.VerticalGridLinesBrush" Value="{DynamicResource GrayBrush7}"/>
        <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource MetroDataGridColumnHeader}"/>
        <Setter Property="DataGrid.RowHeaderStyle" Value="{StaticResource MetroDataGridRowHeader}"/>
        <Setter Property="DataGrid.CellStyle" Value="{StaticResource MetroDataGridCell}"/>
        <Setter Property="DataGrid.RowStyle" Value="{StaticResource MetroDataGridRow}" />
        <Setter Property="DataGrid.SelectionMode" Value="Single" />
        <Setter Property="DataGrid.HeadersVisibility" Value="Column"/>
        <Setter Property="DataGrid.DropLocationIndicatorStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Separator}">
                    <Setter Property="Control.Background" Value="{DynamicResource GrayBrush7}"/>
                    <Setter Property="FrameworkElement.Width" Value="2"/>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Separator}">
                                <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}"
                           Width="{TemplateBinding FrameworkElement.Width}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <Control.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false"
                            Style="{DynamicResource {ComponentResourceKey ResourceId=MetroDataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}"
                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1"
                                                    Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <Grid Row="1" ColumnSpan="2">
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                        </Grid>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2"
                               Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Orientation="Vertical" Grid.Row="1"
                               Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                               Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        <Grid Column="1" Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1"
                                 Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Orientation="Horizontal"
                                 Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                 ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                 Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Control.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AzureDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}"
         BasedOn="{StaticResource MetroDataGridColumnHeader}">
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,10"/>
    </Style>
    <Style x:Key="AzureDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}"
         BasedOn="{StaticResource MetroDataGridRowHeader}">
        <Setter Property="Control.BorderThickness" Value="0,0,0,0"/>
    </Style>
    <Style x:Key="AzureDataGridCell" TargetType="{x:Type DataGridCell}"
         BasedOn="{StaticResource MetroDataGridCell}">
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Column.DisplayIndex}"
                   Value="0">
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush4}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Column.DisplayIndex}"
                     Value="0"/>
                    <Condition Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=IsSelected}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush2}"/>
            </MultiDataTrigger>
            <Trigger Property="DataGridCell.IsSelected" Value="true">
                <Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush7}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsEnabled" Value="false"/>
                    <Condition Property="DataGridCell.IsSelected" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AzureDataGridRow" TargetType="{x:Type DataGridRow}"
         BasedOn="{StaticResource MetroDataGridRow}"/>
    <Style x:Key="AzureDataGridRowWithMargin" TargetType="{x:Type DataGridRow}"
         BasedOn="{StaticResource AzureDataGridRow}">
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,1"/>
    </Style>
    <Style x:Key="AzureDataGrid" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MetroDataGrid}">
        <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource AzureDataGridColumnHeader}"/>
        <Setter Property="DataGrid.CellStyle" Value="{StaticResource AzureDataGridCell}"/>
        <Setter Property="DataGrid.RowStyle" Value="{StaticResource AzureDataGridRow}"/>
        <Setter Property="DataGrid.RowHeaderStyle" Value="{StaticResource AzureDataGridRowHeader}"/>
        <Style.Triggers>
            <Trigger Property="DataGrid.GridLinesVisibility" Value="None">
                <Setter Property="DataGrid.RowStyle" Value="{StaticResource AzureDataGridRowWithMargin}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>