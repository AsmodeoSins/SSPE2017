<Application x:Class="ControlPenales.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:Views="clr-namespace:ControlPenales"
             xmlns:Controles="clr-namespace:ControlPenales.Controls"
        xmlns:Currency="clr-namespace:CurrencyTextBoxControl;assembly=CurrencyTextBoxControl"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:HLDatePicker="clr-namespace:ControlPenales.Controls">
    <Application.Resources>
        <ResourceDictionary>
            
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Colores.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Cobalt.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro.Resources;component/Icons.xaml" />
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/SSPE.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Control.DataGrid.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Control.ComboBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Control.ListView.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Control.DatePicker.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Control.PasswordBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Control.TabControl.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/ControlPenales;component/Resources/Styles/Control.HighlightDatesDatePicker.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <!-- ESTILOS -->
            <Style x:Key="ListBoxItemSelectOnMouseOverStyle" TargetType="ListBoxItem">
                <Setter Property="Controles:ListBoxItemBehavior.SelectOnMouseOver" Value="True"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            </Style>
            <SolidColorBrush x:Key="ListBorder" Color="#FFA5ACB2"/>
            <Style TargetType="{x:Type Controles:AutoCompleteTextBox}">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemSelectOnMouseOverStyle}"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Controles:AutoCompleteTextBox}">
                            <Grid>
                                <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                                <Popup x:Name="PART_Popup" StaysOpen="False">
                                    <ListBox x:Name="PART_ListBox" HorizontalContentAlignment="Stretch"/>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style TargetType="Label">
                <Setter Property="FontSize" Value="11.5"></Setter>
            </Style>
            <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MetroDatePicker}">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="Black" />
                        <Setter Property="FontWeight" Value="SemiBold" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="DescriptionHeaderStyle" TargetType="Label">
                <Setter Property="FontSize" Value="22" />
                <!--<Setter Property="HorizontalAlignment" Value="Left" />-->
            </Style>
            <Style x:Key="TextBlockHeaderStyle" TargetType="TextBlock">
                <Setter Property="FontSize" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Style>
            <Style x:Key="DescriptionSubHeaderStyle" TargetType="Label">
                <Setter Property="FontSize" Value="18" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Style>
            <Style x:Key="DescriptionNUCStyle" TargetType="Label">
                <Setter Property="FontSize" Value="18" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="Margin" Value="0 10 0 0" />
            </Style>

            <Style x:Key="DescriptionHeaderStyleCheckBox" TargetType="CheckBox">
                <Setter Property="FontSize" Value="13" />
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="HorizontalAlignment" Value="Right" />
            </Style>
            <Style x:Key="texto_app" TargetType="TextBlock">
                <Setter Property="FontSize" Value="12" />
            </Style>
            
            <Style x:Key="CurrencyTextBoxNormal" TargetType="{x:Type Currency:CurrencyTextBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Currency:CurrencyTextBox}">
                            <TextBox x:Name="PART_TextBox" TextAlignment="Right" MaxLength="11" FontSize="13" Text="{Binding Number, RelativeSource={RelativeSource TemplatedParent}, StringFormat=C, UpdateSourceTrigger=PropertyChanged}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- MOSTRAR OCULTAR ELEMENTOS -->
            <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"></BooleanToVisibilityConverter>
            
            <!-- ESTILOS CURSOR BOTON -->
            <Style TargetType="Button">
                <Setter Property="Cursor" Value="Hand"></Setter>
            </Style>
            <!-- ESTILO PARA ERRORES -->
            <Style x:Key="ErrorStyle" TargetType="{x:Type Control}">
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!-- ESTILO PARA FOCUS Y VALIDACIONES -->
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MetroTextBox}">
                <Setter Property="Height" Value="26" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Controls:ControlsHelper.FocusBorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="{StaticResource ColorCaptura}" />
                    </Trigger>
                    <Trigger Property="IsFocused" Value="False">
                        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="Black" />
                        <Setter Property="FontWeight" Value="SemiBold" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ViewTabStyle" TargetType="{x:Type UserControl}">
                <Setter Property="FontSize" Value="11.5"></Setter>
            </Style>


            <Style x:Key="MetroCircleButtonStyleWhite"
           TargetType="{x:Type Button}">
                <!--<Setter Property="FocusVisualStyle"
                Value="{StaticResource MetroCircleButtonFocusVisual}" />-->
                <Setter Property="Background"
                Value="Transparent" />
                <Setter Property="BorderThickness"
                Value="2" />
                <Setter Property="BorderBrush"
                Value="#FFFFFF" />
                <Setter Property="HorizontalContentAlignment"
                Value="Center" />
                <Setter Property="VerticalContentAlignment"
                Value="Center" />
                <Setter Property="Padding"
                Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Ellipse Fill="{TemplateBinding Background}"
                                 Margin="4"
                                 StrokeThickness="0" />
                                <Ellipse x:Name="ellipsebg"
                                 Fill="{DynamicResource BlackBrush}"
                                 Opacity="0"
                                 Margin="4"
                                 StrokeThickness="0" />
                                <Ellipse x:Name="ellipse"
                                 Margin="4"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}" />
                                <ContentPresenter x:Name="content"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed"
                                 Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ellipsebg"
                                                         Storyboard.TargetProperty="Opacity"
                                                         From="0"
                                                         To="0.3"
                                                         Duration="0:0:0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <!-- some out fading -->
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ellipsebg"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:0.5" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsMouseOver"
                                 Value="True">
                                    <Setter TargetName="ellipse"
                                    Property="Opacity"
                                    Value="1" />
                                </Trigger>
                                <Trigger Property="IsMouseOver"
                                 Value="False">
                                    <Setter TargetName="ellipse"
                                    Property="Opacity"
                                    Value="0.7" />
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                 Value="false">
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource GrayBrush7}" />
                                    <Setter TargetName="ellipse"
                                    Property="Opacity"
                                    Value="0.3" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="MetroCircleButtonStyleRed" TargetType="{x:Type Button}">
                <!--<Setter Property="FocusVisualStyle"
                Value="{StaticResource MetroCircleButtonFocusVisual}" />-->
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="BorderBrush" Value="#EA0924" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Ellipse Fill="{TemplateBinding Background}" Margin="4" StrokeThickness="0" />
                                <Ellipse x:Name="ellipsebg" Fill="{DynamicResource BlackBrush}" Opacity="0" Margin="4" StrokeThickness="0" />
                                <Ellipse x:Name="ellipse" Margin="4" Stroke="{TemplateBinding BorderBrush}"
                                        StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}" />
                                <ContentPresenter x:Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" From="0" To="0.3" Duration="0:0:0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <!-- some out fading -->
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ellipse" Property="Opacity" Value="1" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="ellipse" Property="Opacity" Value="0.7" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource GrayBrush7}" />
                                    <Setter TargetName="ellipse" Property="Opacity" Value="0.3" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- TEXBLOCK PARA TOOLTIP DE BORDE DE ERROR -->
            <Style x:Key="errorLabel" TargetType="TextBlock">
                <Setter Property="Foreground" Value="White"></Setter>
                <Setter Property="TextWrapping" Value="Wrap"></Setter>
            </Style>
            <!--ControlTemplate PARA TOOLTIP DE BORDE DE ERROR-->
            <ControlTemplate x:Key="ToolTipTemplate" TargetType="ToolTip">
                <Border BorderBrush="#DC000C" BorderThickness="2" CornerRadius="2" Background="#DC000C" MaxWidth="200">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="0"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        Margin="{TemplateBinding Padding}" 
                                        VerticalAlignment="Center"/>
                    </Grid>
                </Border>
            </ControlTemplate>

            <Style x:Key="MetroDataGridRow" TargetType="{x:Type DataGridRow}">
                <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
                <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
                <Style.Triggers>
                    <Trigger Property="DataGridRow.IsSelected" Value="true">
                        <Setter Property="Control.Background" Value="Black"/>
                        <Setter Property="Control.Foreground" Value="Black"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="DataGridRow.IsSelected" Value="true"/>
                            <Condition Property="Selector.IsSelectionActive" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush2}"/>
                    </MultiTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="FullRow"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=SelectionUnit, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                     Value="CellOrRowHeader"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush3}"/>
                    </MultiDataTrigger>
                    <Trigger Property="UIElement.IsEnabled" Value="false">
                        <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush7}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="UIElement.IsEnabled" Value="false"/>
                            <Condition Property="DataGridRow.IsSelected" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush7}"/>
                        <Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Views:StaticSourcesViewModel x:Key="StaticSources" />

            <Views:PopUpsViewModels x:Key="PopUpsSources"  />

            <Views:EscapePopUpHelpper x:Key="EscapePopUpHelpper" />

        </ResourceDictionary>
    </Application.Resources>
</Application>
