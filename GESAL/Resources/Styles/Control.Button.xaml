<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro">
    <Converters:ToUpperConverter x:Key="ToUpperConverter"/>
    <Converters:ToLowerConverter x:Key="ToLowerConverter"/>
    <Style x:Key="MetroFlatButton" TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="{DynamicResource FlatButtonBackgroundBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource FlatButtonForegroundBrush}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource FlatButtonFontSize}"/>
        <Setter Property="Control.Padding" Value="10,5,10,5"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Margin="0" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{DynamicResource FlatButtonPressedBackgroundBrush}" TargetName="Border"
                      Property="Border.Background"/>
                            <Setter Value="{DynamicResource FlatButtonPressedForegroundBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource GrayBrush2}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="Control.Background" Value="DarkGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroCircleButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Ellipse Margin="8" Stroke="{DynamicResource BlackBrush}" StrokeDashArray="2 2" StrokeThickness="1"
                   SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroCircleButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource MetroCircleButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="2"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush3}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Fill="{TemplateBinding Control.Background}" Margin="4" StrokeThickness="0"/>
                        <Ellipse x:Name="ellipsebg" Fill="{DynamicResource BlackBrush}" Opacity="0" Margin="4" StrokeThickness="0"/>
                        <Ellipse x:Name="ellipse" Margin="4" Stroke="{TemplateBinding Control.BorderBrush}"
                     StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}"/>
                        <ContentPresenter x:Name="content" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" From="0" To="0.3"
                                     Duration="0:0:0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="false">
                            <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource GrayBrush7}" Property="Control.Foreground"/>
                            <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ChromelessButtonTemplate" TargetType="{x:Type ButtonBase}">
        <Grid Background="{TemplateBinding Control.Background}">
            <ContentPresenter x:Name="contentPresenter"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="true"
                        Opacity="0.75"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="false">
                <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value=".5"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="#ADADAD"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ChromelessButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Control.Background" Value="{DynamicResource TransparentWhiteBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template" Value="{StaticResource ChromelessButtonTemplate}"/>
    </Style>
    <Style x:Key="MetroBaseWindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="{DynamicResource TransparentWhiteBrush}"/>
        <Setter Property="Control.Foreground"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Control.Background}">
                        <ContentPresenter x:Name="contentPresenter"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="true"
                              Opacity="0.75"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="false">
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Control.Background" Value="{DynamicResource SemiTransparentWhiteBrush}"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter Property="Control.Background" Value="{DynamicResource HighlightBrush}"/>
                <Setter Property="Control.Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource IdealForegroundDisabledBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MetroWindowButtonStyle" TargetType="{x:Type Button}"
         BasedOn="{StaticResource MetroBaseWindowButtonStyle}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="FrameworkElement.Width" Value="34"/>
        <Setter Property="FrameworkElement.MaxHeight" Value="34"/>
        <Setter Property="Control.Padding" Value="0"/>
    </Style>
    <Style x:Key="MetroButton" TargetType="{x:Type Button}">
        <Setter Property="Controls:ButtonHelper.CornerRadius" Value="3"/>
        <Setter Property="FrameworkElement.MinHeight" Value="25"/>
        <Setter Property="Control.FontWeight" Value="Bold"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource UpperCaseContentFontSize}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush10}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Padding" Value="5,6"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="Background" Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}"/>
                        <Border x:Name="Border" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}"/>
                        <Border x:Name="DisabledVisualElement"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    Background="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="false" Opacity="0"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}"/>
                        <ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              RecognizesAccessKey="true" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase" Value="false">
                            <Setter TargetName="contentPresenter"
                      Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Converter={StaticResource ToUpperConverter}}"
                      Property="ContentPresenter.Content"/>
                        </Trigger>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase" Value="true">
                            <Setter TargetName="contentPresenter"
                      Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                      Property="ContentPresenter.Content"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Value="{DynamicResource GrayBrush8}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Background" Value="{DynamicResource GrayBrush7}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Border" Property="Border.BorderThickness" Value="2"/>
                            <Setter TargetName="Border" Value="{DynamicResource ButtonMouseOverBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledVisualElement" Property="UIElement.Opacity" Value="0.7"/>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SquareButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.MinHeight" Value="25"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="Control.FontWeight" Value="SemiBold"/>
        <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.Padding" Value="5,6"/>
        <Setter Property="Control.BorderThickness" Value="2"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Control.Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0.7"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused"/>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}"/>
                        <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}"
                       IsHitTestVisible="false" Opacity="0"/>
                        <ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" OpacityMask="{x:Null}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase" Value="false">
                            <Setter TargetName="contentPresenter"
                      Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Converter={StaticResource ToLowerConverter}}"
                      Property="ContentPresenter.Content"/>
                        </Trigger>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase" Value="true">
                            <Setter TargetName="contentPresenter"
                      Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                      Property="ContentPresenter.Content"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource GrayBrush8}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource BlackBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{DynamicResource BlackBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AccentedSquareButtonStyle" BasedOn="{StaticResource SquareButtonStyle}"
         TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource IdealForegroundColorBrush}"/>
    </Style>
    <Style x:Key="HighlightedSquareButtonStyle" BasedOn="{StaticResource SquareButtonStyle}"
         TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="{DynamicResource HighlightBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource IdealForegroundColorBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Control.Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0.7"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused"/>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}"/>
                        <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}"
                       IsHitTestVisible="false" Opacity="0"/>
                        <ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" OpacityMask="{x:Null}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase" Value="false">
                            <Setter TargetName="contentPresenter"
                      Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Converter={StaticResource ToLowerConverter}}"
                      Property="ContentPresenter.Content"/>
                        </Trigger>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase" Value="true">
                            <Setter TargetName="contentPresenter"
                      Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                      Property="ContentPresenter.Content"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{DynamicResource BlackBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroCircleToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource MetroCircleButtonFocusVisual}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Ellipse Fill="{TemplateBinding Control.Background}" Margin="4" StrokeThickness="0"/>
                        <Ellipse x:Name="ellipsebg" Fill="{DynamicResource AccentColorBrush}" Opacity="0" Margin="4"
                     StrokeThickness="0"/>
                        <Ellipse x:Name="ellipse" Margin="4" Stroke="#ADADAD"
                     StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <TriggerBase.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" From="0" To="1"
                                     Duration="0:0:0.3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.ExitActions>
                            <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground"/>
                            <Setter TargetName="ellipse" Value="{DynamicResource AccentColorBrush}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="false">
                            <Setter TargetName="ellipse" Property="UIElement.Opacity" Value=".5"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource GrayBrush7}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Controls:ButtonHelper.CornerRadius" Value="3"/>
        <Setter Property="Control.Background" Value="{DynamicResource GrayBrush10}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource UpperCaseContentFontSize}"/>
        <Setter Property="Control.FontWeight" Value="Bold"/>
        <Setter Property="Control.Padding" Value="5,6"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.MinHeight" Value="25"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="Background" Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}"/>
                        <Border x:Name="Border" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}"/>
                        <Border x:Name="DisabledVisualElement"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    Background="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="false" Opacity="0"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}"/>
                        <ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              RecognizesAccessKey="true" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Border.BorderThickness" Value="2"/>
                            <Setter TargetName="Background" Value="{DynamicResource GrayBrush2}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{DynamicResource GrayBrush5}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background" Value="{DynamicResource GrayBrush8}" Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Background" Value="{DynamicResource GrayBrush3}" Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Background" Value="{DynamicResource GrayBrush7}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Border" Property="Border.BorderThickness" Value="2"/>
                            <Setter TargetName="Border" Value="{DynamicResource ButtonMouseOverBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="DisabledVisualElement" Property="UIElement.Opacity" Value="0.7"/>
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SquareMetroButton" TargetType="{x:Type Button}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="Control.BorderThickness" Value="2"/>
        <Setter Property="Control.Padding" Value="12,4,12,4"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="Control.FontWeight" Value="SemiBold"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverRectangle" To="0.4"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedRectangle" To="1"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Border" To="0.5"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="PointerFocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}">
                            <Grid>
                                <Rectangle x:Name="MouseOverRectangle" Fill="{DynamicResource WhiteBrush}" Opacity="0"/>
                                <Rectangle x:Name="PressedRectangle" Fill="{DynamicResource BlackBrush}" Opacity="0"/>
                                <ContentPresenter x:Name="ContentPresenter" TextBlock.Foreground="{TemplateBinding Control.Foreground}"
                                  Content="{TemplateBinding ContentControl.Content}"
                                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                  Margin="{TemplateBinding Control.Padding}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="FocusVisualWhite" IsHitTestVisible="false" Stroke="White" StrokeEndLineCap="Square"
                       StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="1.5"/>
                        <Rectangle x:Name="FocusVisualBlack" IsHitTestVisible="false" Stroke="Black" StrokeEndLineCap="Square"
                       StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="0.5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MetroAccentButton" TargetType="{x:Type Button}" BasedOn="{StaticResource SquareMetroButton}">
        <Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentSelectedColorBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverRectangle" To="0.4"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedRectangle" To="1"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Border" To="0.5"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="PointerFocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}">
                            <Grid>
                                <Rectangle x:Name="MouseOverRectangle" Fill="{DynamicResource BlackBrush}" Opacity="0"/>
                                <Rectangle x:Name="PressedRectangle" Fill="White" Opacity="0"/>
                                <ContentPresenter x:Name="ContentPresenter" TextBlock.Foreground="{TemplateBinding Control.Foreground}"
                                  Content="{TemplateBinding ContentControl.Content}"
                                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                  Margin="{TemplateBinding Control.Padding}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="FocusVisualWhite" IsHitTestVisible="false" Stroke="White" StrokeEndLineCap="Square"
                       StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="1.5"/>
                        <Rectangle x:Name="FocusVisualBlack" IsHitTestVisible="false" Stroke="Black" StrokeEndLineCap="Square"
                       StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="0.5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Property="Control.Foreground" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--fix para square button style-->
    <Style x:Key="SquareButtonStyleCustom"
           TargetType="{x:Type Button}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BlackBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Padding" Value="5,6" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                                                                       Storyboard.TargetName="DisabledVisualElement">
                                            <SplineDoubleKeyFrame KeyTime="0"
                                                                  Value="0.7" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidFocused" />
                                <VisualState x:Name="InvalidUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{x:Null}" />
                        <Rectangle x:Name="DisabledVisualElement"
                                   Fill="{DynamicResource ControlsDisabledBrush}"
                                   IsHitTestVisible="false"
                                   Opacity="0" />
                        <ContentPresenter x:Name="contentPresenter"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          OpacityMask="{x:Null}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase"
                                 Value="False">
                            <Setter TargetName="contentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" />
                            <!--Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Converter={Converter:ToLowerConverter}}" />-->
                        </Trigger>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase" Value="True">
                            <Setter TargetName="contentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource GrayBrush8}" />
                            <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BlackBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AccentedSquareButtonStyleCustom" BasedOn="{StaticResource SquareButtonStyleCustom}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
    </Style>
</ResourceDictionary>